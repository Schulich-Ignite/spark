{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the documentation for spark. Spark is a library developed by Schulich Ignite to help students draw in python. The basics Below is everything you need to get started with spark. If you are looking for something specific there is a search bar in the top right and a list of available documentation on the left, and at the bottom of this page. Also note that you can copy any code listed on this site by clicking on the clipboard icon in the top right of the code block. Logging in and Slides To use spark simply login to the Schulich Ignite server here , you will need a gmail account (an email with @gmail.com). Slides for each class are available on the main website . Interface Please keep in mind the Schulich Ignite server is based on Jupyter Notebooks , and may look different to other versions of python you have seen. Toolbars There are two toolbars Toolbar 1 Primarily for creating new notebooks, changing settings, and exporting notebooks Toolbar 2 Used to run cells, and other tasks within the current notebook Play buttons Also note that there are two \"play\" options: The first is to run the current cell (can also be done with shift + enter). The second runs all cells in the notebook Cells Cells are the little grey rectangles that appear under the second toolbar. You will write your code inside of them. Each cell can be run independently, and notebooks can have an unlimited (mostly) number of cells. Cell numbers Also keep in mind the number to the left of the text input (grey rectangle) is the cell number, that tells you which cells were last used. Collapsing cells You can also collapse a cell, or it's output by hitting the blue rectangle on the left of the cell. For example this is what it looks like before: And what it looks like after hitting the rectangle: Running cells To run cells you can either click the play button on toolbar 2 , or hit shift + enter on your keyboard Setting up a notebook Once you are logged in you can create a notebook by going to File --> New --> Notebook : You will then need to just hit Select on the pre-selected kernal that shows up: Boilerplate At the start of each notebook you will need to include the following lines in the first cell, and run it before writing any other code: 1 2 3 ! pip install -- upgrade schulich - ignite import spark % reload_ext spark Your notebook should look like this: Roughly speaking all this code does, is download the latest version of spark and then bring it into the notebook so we can use it. Setting up a cell At the start of each cell (except the first) you need to have at least the following two lines if your code only needs to draw things once: 1 2 3 4 %% ignite def setup (): size ( 200 , 200 ) # You can change 200, 200 to any integers You can also use the draw() function, which will execute the code constantly that is inside it. The draw function executes 30 times per second. This makes it ideal for things like animation, and any code that will update itself over time. Most of the time this will be the setup you want : 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) # You can change 200, 200 to any integers def draw (): # loops everything in here forever and draws stuff Saving notebooks There are two options to save. You can save a notebook with a new name, or save an existing notebook: Save a notebook with a name To save your notebook with a new name go to *file --> save as or use Ctrl or Cmd + Shift + S : A few things to keep in mind when saving file: You CANNOT have ANY spaces, use _ to seperate if need be i.e. my_test_notebook.ipynb Make sure you have .ipynb at the end, if you don't the file won't load Save an existing notebook To save your notebook with the same name go to file --> save or use Ctrl or Cmd + S : Other documentation Colors - Any functions related to coloring shapes, text, or background Input - Any functions related to taking user input, such as mouse position or keyboard input Shapes & Text - Any functions related to creating shapes and/or text Utilities - Any other useful functions that do not fit the above categories","title":"Getting Started"},{"location":"#the-basics","text":"Below is everything you need to get started with spark. If you are looking for something specific there is a search bar in the top right and a list of available documentation on the left, and at the bottom of this page. Also note that you can copy any code listed on this site by clicking on the clipboard icon in the top right of the code block.","title":"The basics"},{"location":"#logging-in-and-slides","text":"To use spark simply login to the Schulich Ignite server here , you will need a gmail account (an email with @gmail.com). Slides for each class are available on the main website .","title":"Logging in and Slides"},{"location":"#interface","text":"Please keep in mind the Schulich Ignite server is based on Jupyter Notebooks , and may look different to other versions of python you have seen.","title":"Interface"},{"location":"#toolbars","text":"There are two toolbars","title":"Toolbars"},{"location":"#toolbar-1","text":"Primarily for creating new notebooks, changing settings, and exporting notebooks","title":"Toolbar 1"},{"location":"#toolbar-2","text":"Used to run cells, and other tasks within the current notebook","title":"Toolbar 2"},{"location":"#play-buttons","text":"Also note that there are two \"play\" options: The first is to run the current cell (can also be done with shift + enter). The second runs all cells in the notebook","title":"Play buttons"},{"location":"#cells","text":"Cells are the little grey rectangles that appear under the second toolbar. You will write your code inside of them. Each cell can be run independently, and notebooks can have an unlimited (mostly) number of cells.","title":"Cells"},{"location":"#cell-numbers","text":"Also keep in mind the number to the left of the text input (grey rectangle) is the cell number, that tells you which cells were last used.","title":"Cell numbers"},{"location":"#collapsing-cells","text":"You can also collapse a cell, or it's output by hitting the blue rectangle on the left of the cell. For example this is what it looks like before: And what it looks like after hitting the rectangle:","title":"Collapsing cells"},{"location":"#running-cells","text":"To run cells you can either click the play button on toolbar 2 , or hit shift + enter on your keyboard","title":"Running cells"},{"location":"#setting-up-a-notebook","text":"Once you are logged in you can create a notebook by going to File --> New --> Notebook : You will then need to just hit Select on the pre-selected kernal that shows up:","title":"Setting up a notebook"},{"location":"#boilerplate","text":"At the start of each notebook you will need to include the following lines in the first cell, and run it before writing any other code: 1 2 3 ! pip install -- upgrade schulich - ignite import spark % reload_ext spark Your notebook should look like this: Roughly speaking all this code does, is download the latest version of spark and then bring it into the notebook so we can use it.","title":"Boilerplate"},{"location":"#setting-up-a-cell","text":"At the start of each cell (except the first) you need to have at least the following two lines if your code only needs to draw things once: 1 2 3 4 %% ignite def setup (): size ( 200 , 200 ) # You can change 200, 200 to any integers You can also use the draw() function, which will execute the code constantly that is inside it. The draw function executes 30 times per second. This makes it ideal for things like animation, and any code that will update itself over time. Most of the time this will be the setup you want : 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) # You can change 200, 200 to any integers def draw (): # loops everything in here forever and draws stuff","title":"Setting up a cell"},{"location":"#saving-notebooks","text":"There are two options to save. You can save a notebook with a new name, or save an existing notebook:","title":"Saving notebooks"},{"location":"#save-a-notebook-with-a-name","text":"To save your notebook with a new name go to *file --> save as or use Ctrl or Cmd + Shift + S : A few things to keep in mind when saving file: You CANNOT have ANY spaces, use _ to seperate if need be i.e. my_test_notebook.ipynb Make sure you have .ipynb at the end, if you don't the file won't load","title":"Save a notebook with a name"},{"location":"#save-an-existing-notebook","text":"To save your notebook with the same name go to file --> save or use Ctrl or Cmd + S :","title":"Save an existing notebook"},{"location":"#other-documentation","text":"Colors - Any functions related to coloring shapes, text, or background Input - Any functions related to taking user input, such as mouse position or keyboard input Shapes & Text - Any functions related to creating shapes and/or text Utilities - Any other useful functions that do not fit the above categories","title":"Other documentation"},{"location":"color/","text":"Below is a list of all of the information about colors within spark. All of the examples below assume you have the boilerplate from the notebook setup in your code Creating a background There are two ways to use background: Method Description Syntax String Give the name i.e. \"green\" background(\"Green\") 3 ints Give the r,g,b vaule i.e. 0,255,0 background(0, 255, 0) String background 1 background ( color ) Parameters color: (str) The name of the color to use Example(s): Creating a green background 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): background ( \"Green\" ) Results in: Integer background 1 background ( r , g , b ) Parameters r: (int) The red value (between 0-255) g: (int) The green value (between 0-255) b: (int) The blue value (between 0-255) Example(s): Creating a green background 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): background ( 0 , 255 , 0 ) Results in: Clearing the screen To clear the screen, there are two options: Method Description clear() Clear the screen to default background color (light or dark depending on user settings) background() Clear the screen with a specific color Notes For both make sure to put it at the top or bottom of your draw() function if you are using one For the r, g, b values they go from 0-255. So for all green you would use 0, 255, 0 clear() clear explicitly just clears the screen to the default background color 1 clear () Example(s): Drawing a green background and a circle, then clearing the screen and drawing just a rectangle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 %% ignite def setup (): size ( 200 , 200 ) # Draw stuff before clear background ( 0 , 255 , 0 ) fill_circle ( 100 , 100 , 75 ) # Clear everything on the screen clear () # Only this stuff shows up fill_rect ( 100 , 100 , 75 , 50 ) Results in: Changing the color of shapes There are two available options to change the color of shapes you draw: Method Description Syntax String Give the name i.e. \"green\" fill_style(\"Green\") 3 ints Give the r,g,b vaule i.e. 0,255,0 fill_style(0, 255, 0) Notes Keep in mind you need to select the color then draw the shape. Like dipping a paintbrush before drawing. For the r, g, b values they go from 0-255. So for all green you would use 0, 255, 0 String version 1 fill_style ( color ) Parameters color: (str) The name of a color ( full list found here ) i.e. \"blue\" Example(s): Drawing a red, a green, and a blue circle at different points on the canvas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 %% ignite def setup (): size ( 200 , 200 ) # Red Circle fill_style ( \"red\" ) fill_circle ( 50 , 50 , 50 ) # Green Circle fill_style ( \"green\" ) fill_circle ( 100 , 100 , 50 ) # Blue Circle fill_style ( \"blue\" ) fill_circle ( 150 , 150 , 50 ) Results in: Integer version 1 fill_style ( r , g , b ) Parameters r: (int) The red value (between 0-255) g: (int) The green value (between 0-255) b: (int) The blue value (between 0-255) Example(s): Drawing a red, a green, and a blue circle at different points on the canvas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 %% ignite def setup (): size ( 200 , 200 ) # Red circle fill_style ( 255 , 0 , 0 ) fill_circle ( 50 , 50 , 50 ) # Green Circle fill_style ( 0 , 255 , 0 ) fill_circle ( 100 , 100 , 50 ) # Blue circle fill_style ( 0 , 0 , 255 ) fill_circle ( 150 , 150 , 50 ) Results in:","title":"Color"},{"location":"color/#creating-a-background","text":"There are two ways to use background: Method Description Syntax String Give the name i.e. \"green\" background(\"Green\") 3 ints Give the r,g,b vaule i.e. 0,255,0 background(0, 255, 0)","title":"Creating a background"},{"location":"color/#string-background","text":"1 background ( color ) Parameters color: (str) The name of the color to use Example(s): Creating a green background 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): background ( \"Green\" ) Results in:","title":"String background"},{"location":"color/#integer-background","text":"1 background ( r , g , b ) Parameters r: (int) The red value (between 0-255) g: (int) The green value (between 0-255) b: (int) The blue value (between 0-255) Example(s): Creating a green background 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): background ( 0 , 255 , 0 ) Results in:","title":"Integer background"},{"location":"color/#clearing-the-screen","text":"To clear the screen, there are two options: Method Description clear() Clear the screen to default background color (light or dark depending on user settings) background() Clear the screen with a specific color","title":"Clearing the screen"},{"location":"color/#notes","text":"For both make sure to put it at the top or bottom of your draw() function if you are using one For the r, g, b values they go from 0-255. So for all green you would use 0, 255, 0","title":"Notes"},{"location":"color/#clear","text":"clear explicitly just clears the screen to the default background color 1 clear () Example(s): Drawing a green background and a circle, then clearing the screen and drawing just a rectangle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 %% ignite def setup (): size ( 200 , 200 ) # Draw stuff before clear background ( 0 , 255 , 0 ) fill_circle ( 100 , 100 , 75 ) # Clear everything on the screen clear () # Only this stuff shows up fill_rect ( 100 , 100 , 75 , 50 ) Results in:","title":"clear()"},{"location":"color/#changing-the-color-of-shapes","text":"There are two available options to change the color of shapes you draw: Method Description Syntax String Give the name i.e. \"green\" fill_style(\"Green\") 3 ints Give the r,g,b vaule i.e. 0,255,0 fill_style(0, 255, 0)","title":"Changing the color of shapes"},{"location":"color/#notes_1","text":"Keep in mind you need to select the color then draw the shape. Like dipping a paintbrush before drawing. For the r, g, b values they go from 0-255. So for all green you would use 0, 255, 0","title":"Notes"},{"location":"color/#string-version","text":"1 fill_style ( color ) Parameters color: (str) The name of a color ( full list found here ) i.e. \"blue\" Example(s): Drawing a red, a green, and a blue circle at different points on the canvas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 %% ignite def setup (): size ( 200 , 200 ) # Red Circle fill_style ( \"red\" ) fill_circle ( 50 , 50 , 50 ) # Green Circle fill_style ( \"green\" ) fill_circle ( 100 , 100 , 50 ) # Blue Circle fill_style ( \"blue\" ) fill_circle ( 150 , 150 , 50 ) Results in:","title":"String version"},{"location":"color/#integer-version","text":"1 fill_style ( r , g , b ) Parameters r: (int) The red value (between 0-255) g: (int) The green value (between 0-255) b: (int) The blue value (between 0-255) Example(s): Drawing a red, a green, and a blue circle at different points on the canvas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 %% ignite def setup (): size ( 200 , 200 ) # Red circle fill_style ( 255 , 0 , 0 ) fill_circle ( 50 , 50 , 50 ) # Green Circle fill_style ( 0 , 255 , 0 ) fill_circle ( 100 , 100 , 50 ) # Blue circle fill_style ( 0 , 0 , 255 ) fill_circle ( 150 , 150 , 50 ) Results in:","title":"Integer version"},{"location":"input/","text":"Below you will find a list of all information necessary to take user input within spark. All of the examples below assume you have the boilerplate from the notebook setup in your code Mouse position To get the current mouse position you can use the following variables: mouse_x: (int) The value of the x position of the mouse mouse_y: (int) The value of the y position of the mouse Example(s): Drawing a circle at the mouse position constantly (remember it will draw over itself over and over again and leave a trail): 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_circle ( mouse_x , mouse_y , 25 ) Results in: Mouse pressed To find out if the mouse has been pressed you can use the variable: mouse_is_pressed: (bool) True if the mouse has been pressed, otherwise False Example(s): Rectangle will be red if the mouse has been pressed, otherwise it will be blue 1 2 3 4 5 6 7 8 9 10 11 12 %% ignite def setup (): size ( 200 , 200 ) def draw (): if mouse_is_pressed : fill_style ( \"red\" ) else : fill_style ( \"blue\" ) fill_rect ( mouse_x , mouse_y , 20 , 20 ) Results in: Getting text from user To ask the user for an answer to a question you can use: 1 input ( message ) Keep in mind, whatever the user types in will always be a string. See the second example for how to convert to other types. Parameters message: (str) The text you want to show the user when asking for input Example(s): Ask the user for their name, then display it to the screen: 1 2 3 4 5 6 %% ignite def setup (): # Only drawn once, so just using setup() size ( 200 , 200 ) name = input ( \"What is your name?: \" ) text ( name , 100 , 100 ) which results in: Ask the user for a diameter. We need to convert the string to an integer, we can do this using int(). Draw a circle of that diameter at (100, 100): 1 2 3 4 5 6 %% ignite def setup (): # Only drawn once, so just using setup() size ( 200 , 200 ) diameter = int ( input ( \"What diameter should the circle be?: \" )) # cast the string to an integer fill_circle ( 100 , 100 diameter ) which results in: Check for mouse presses Spark features multiple ways to check for user mouse presses: Name Type Description mouse_is_pressed Variable A boolean variable that is True when a mouse button is pressed mouse_down() User defined function A definable function that activates when a mouse button is pressed down mouse_up() User defined function A definable function that activates when a mouse button is released Notes All of these variables fire on any mouse button press (left mouse click, right mouse click, or scroll wheel click) Mouse events are only captured when the mouse is inside the canvas boundary mouse_is_pressed A boolean that is True when any mouse button is pressed Example(s): Draw a square at the (mouse_x, mouse_y) position when the mouse is pressed 1 2 3 4 5 6 7 8 %% ignite def setup (): background ( 255 ) size ( 500 , 500 ) def draw (): if mouse_is_pressed : square ( mouse_x , mouse_y , 45 ) Results in: mouse_down() 1 2 def mouse_down (): # Your code goes here This is a user definable function that activates when any mouse button is pressed down. Notes This function is handy when you want to do something in a draw () loop one time on mouse press. mouse_is_pressed will constantly fire in a draw () loop, whereas mouse_down () will fire once per event Example(s): Print \"Mouse Button Pressed Down\" if a mouse button is pressed down 1 2 3 4 5 6 7 8 9 10 %% ignite def setup (): size ( 200 , 200 ) def draw (): ... # Does nothing def mouse_down (): print ( \"Mouse Button Pressed Down\" ) Results in: mouse_up() 1 2 def mouse_up (): # Your code goes here This is a user definable function that activates when any mouse button is released after being pressed down. Notes This function is handy when you want to do something in a draw () loop one time on mouse release. mouse_is_pressed will constantly fire in a draw () loop, whereas mouse_up () will fire once per event Example(s): Print \"Mouse Button Released\" if a mouse button is released after being pressed down 1 2 3 4 5 6 7 8 9 10 %% ignite def setup (): size ( 200 , 200 ) def draw (): ... # Does nothing def mouse_up (): print ( \"Mouse Button Released\" ) Results in: Check for key presses Spark features multiple ways to check for user key presses: Name Type Description key Variable A string of what key was last pressed keys_held() Function A function that returns True if the provided key is held key_pressed() User defined function A definable function that activates when any key is pressed key_released() User defined function A definable function that activates when any key is released key_repeated() User defined function A definable function that activates when any key is held Notes Key events only trigger when the mouse is inside the canvas key A string that is the last key event (a key being pressed, released, or held down). So for example if you press, hold or release Shift then key == \"Shift\" . Notes This variable does not clear , meaning if a key is pressed it will remain the value until a new key is pressed This variable will be the uppercase letter if Shift + a letter is pressed i.e. Shift + A would be key == \"A\" This variable will be a symbol if Shift + a number is pressed i.e. Shift + 3 would be key == \"$\" Special Keys Key Value Up key == \"ArrowUp\" Down key == \"ArrowDown\" Left key == \"ArrowLeft\" Right key == \"ArrowRight\" Tab key == \"Tab\" Ctrl key == \"Control\" Alt or Option key == \"Alt\" Esc key == \"Escape\" Win or Cmd key == \"Meta\" Backspace key == \"Backspace\" Example(s): Print out each key as they are pressed (I pressed just the A key in this example) 1 2 3 4 5 6 7 8 %% ignite def setup (): size ( 500 , 500 ) def draw (): background ( 255 ) text_size ( 32 ) text ( key , 250 , 200 ) Results in: keys_held() 1 keys_held ( key ) Parameters key: (str) The key you want to check for Returns bool; Returns True if the provided key is held, else False. Print \"b key held\" if the B key is held 1 2 3 4 5 6 7 8 %% ignite def setup (): size ( 200 , 200 ) def draw (): if keys_held ( \"b\" ): print ( \"b key held\" ) Results in: key_pressed() 1 2 def key_pressed (): # Your code goes here This is a user definable function that activates when any key is held. Example(s): Print a key if it's pressed 1 2 3 4 5 6 7 8 9 10 %% ignite def setup (): size ( 200 , 200 ) def draw (): ... # Does nothing def key_pressed (): print ( key ) Results in: key_released() 1 2 def key_released (): # Your code goes here This is a user definable function that activates when any key is released. Example(s): Print a key if it's pressed 1 2 3 4 5 6 7 8 9 10 %% ignite def setup (): size ( 200 , 200 ) def draw (): ... # Does nothing def key_released (): print ( key ) Results in: key_repeated() 1 2 def key_repeated (): # Your code goes here This is a user definable function that activates when any key is held. Note this function continuously activates for as long as the key is held. Example(s): Print a key if it's held 1 2 3 4 5 6 7 8 9 10 %% ignite def setup (): size ( 200 , 200 ) def draw (): ... # Does nothing def key_repeated (): print ( key ) Results in:","title":"Input"},{"location":"input/#mouse-position","text":"To get the current mouse position you can use the following variables: mouse_x: (int) The value of the x position of the mouse mouse_y: (int) The value of the y position of the mouse Example(s): Drawing a circle at the mouse position constantly (remember it will draw over itself over and over again and leave a trail): 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_circle ( mouse_x , mouse_y , 25 ) Results in:","title":"Mouse position"},{"location":"input/#mouse-pressed","text":"To find out if the mouse has been pressed you can use the variable: mouse_is_pressed: (bool) True if the mouse has been pressed, otherwise False Example(s): Rectangle will be red if the mouse has been pressed, otherwise it will be blue 1 2 3 4 5 6 7 8 9 10 11 12 %% ignite def setup (): size ( 200 , 200 ) def draw (): if mouse_is_pressed : fill_style ( \"red\" ) else : fill_style ( \"blue\" ) fill_rect ( mouse_x , mouse_y , 20 , 20 ) Results in:","title":"Mouse pressed"},{"location":"input/#getting-text-from-user","text":"To ask the user for an answer to a question you can use: 1 input ( message ) Keep in mind, whatever the user types in will always be a string. See the second example for how to convert to other types. Parameters message: (str) The text you want to show the user when asking for input Example(s): Ask the user for their name, then display it to the screen: 1 2 3 4 5 6 %% ignite def setup (): # Only drawn once, so just using setup() size ( 200 , 200 ) name = input ( \"What is your name?: \" ) text ( name , 100 , 100 ) which results in: Ask the user for a diameter. We need to convert the string to an integer, we can do this using int(). Draw a circle of that diameter at (100, 100): 1 2 3 4 5 6 %% ignite def setup (): # Only drawn once, so just using setup() size ( 200 , 200 ) diameter = int ( input ( \"What diameter should the circle be?: \" )) # cast the string to an integer fill_circle ( 100 , 100 diameter ) which results in:","title":"Getting text from user"},{"location":"input/#check-for-mouse-presses","text":"Spark features multiple ways to check for user mouse presses: Name Type Description mouse_is_pressed Variable A boolean variable that is True when a mouse button is pressed mouse_down() User defined function A definable function that activates when a mouse button is pressed down mouse_up() User defined function A definable function that activates when a mouse button is released Notes All of these variables fire on any mouse button press (left mouse click, right mouse click, or scroll wheel click) Mouse events are only captured when the mouse is inside the canvas boundary","title":"Check for mouse presses"},{"location":"input/#mouse_is_pressed","text":"A boolean that is True when any mouse button is pressed Example(s): Draw a square at the (mouse_x, mouse_y) position when the mouse is pressed 1 2 3 4 5 6 7 8 %% ignite def setup (): background ( 255 ) size ( 500 , 500 ) def draw (): if mouse_is_pressed : square ( mouse_x , mouse_y , 45 ) Results in:","title":"mouse_is_pressed"},{"location":"input/#mouse_down","text":"1 2 def mouse_down (): # Your code goes here This is a user definable function that activates when any mouse button is pressed down.","title":"mouse_down()"},{"location":"input/#notes","text":"This function is handy when you want to do something in a draw () loop one time on mouse press. mouse_is_pressed will constantly fire in a draw () loop, whereas mouse_down () will fire once per event Example(s): Print \"Mouse Button Pressed Down\" if a mouse button is pressed down 1 2 3 4 5 6 7 8 9 10 %% ignite def setup (): size ( 200 , 200 ) def draw (): ... # Does nothing def mouse_down (): print ( \"Mouse Button Pressed Down\" ) Results in:","title":"Notes"},{"location":"input/#mouse_up","text":"1 2 def mouse_up (): # Your code goes here This is a user definable function that activates when any mouse button is released after being pressed down.","title":"mouse_up()"},{"location":"input/#notes_1","text":"This function is handy when you want to do something in a draw () loop one time on mouse release. mouse_is_pressed will constantly fire in a draw () loop, whereas mouse_up () will fire once per event Example(s): Print \"Mouse Button Released\" if a mouse button is released after being pressed down 1 2 3 4 5 6 7 8 9 10 %% ignite def setup (): size ( 200 , 200 ) def draw (): ... # Does nothing def mouse_up (): print ( \"Mouse Button Released\" ) Results in:","title":"Notes"},{"location":"input/#check-for-key-presses","text":"Spark features multiple ways to check for user key presses: Name Type Description key Variable A string of what key was last pressed keys_held() Function A function that returns True if the provided key is held key_pressed() User defined function A definable function that activates when any key is pressed key_released() User defined function A definable function that activates when any key is released key_repeated() User defined function A definable function that activates when any key is held Notes Key events only trigger when the mouse is inside the canvas","title":"Check for key presses"},{"location":"input/#key","text":"A string that is the last key event (a key being pressed, released, or held down). So for example if you press, hold or release Shift then key == \"Shift\" .","title":"key"},{"location":"input/#notes_2","text":"This variable does not clear , meaning if a key is pressed it will remain the value until a new key is pressed This variable will be the uppercase letter if Shift + a letter is pressed i.e. Shift + A would be key == \"A\" This variable will be a symbol if Shift + a number is pressed i.e. Shift + 3 would be key == \"$\"","title":"Notes"},{"location":"input/#special-keys","text":"Key Value Up key == \"ArrowUp\" Down key == \"ArrowDown\" Left key == \"ArrowLeft\" Right key == \"ArrowRight\" Tab key == \"Tab\" Ctrl key == \"Control\" Alt or Option key == \"Alt\" Esc key == \"Escape\" Win or Cmd key == \"Meta\" Backspace key == \"Backspace\" Example(s): Print out each key as they are pressed (I pressed just the A key in this example) 1 2 3 4 5 6 7 8 %% ignite def setup (): size ( 500 , 500 ) def draw (): background ( 255 ) text_size ( 32 ) text ( key , 250 , 200 ) Results in:","title":"Special Keys"},{"location":"input/#keys_held","text":"1 keys_held ( key ) Parameters key: (str) The key you want to check for Returns bool; Returns True if the provided key is held, else False. Print \"b key held\" if the B key is held 1 2 3 4 5 6 7 8 %% ignite def setup (): size ( 200 , 200 ) def draw (): if keys_held ( \"b\" ): print ( \"b key held\" ) Results in:","title":"keys_held()"},{"location":"input/#key_pressed","text":"1 2 def key_pressed (): # Your code goes here This is a user definable function that activates when any key is held. Example(s): Print a key if it's pressed 1 2 3 4 5 6 7 8 9 10 %% ignite def setup (): size ( 200 , 200 ) def draw (): ... # Does nothing def key_pressed (): print ( key ) Results in:","title":"key_pressed()"},{"location":"input/#key_released","text":"1 2 def key_released (): # Your code goes here This is a user definable function that activates when any key is released. Example(s): Print a key if it's pressed 1 2 3 4 5 6 7 8 9 10 %% ignite def setup (): size ( 200 , 200 ) def draw (): ... # Does nothing def key_released (): print ( key ) Results in:","title":"key_released()"},{"location":"input/#key_repeated","text":"1 2 def key_repeated (): # Your code goes here This is a user definable function that activates when any key is held. Note this function continuously activates for as long as the key is held. Example(s): Print a key if it's held 1 2 3 4 5 6 7 8 9 10 %% ignite def setup (): size ( 200 , 200 ) def draw (): ... # Does nothing def key_repeated (): print ( key ) Results in:","title":"key_repeated()"},{"location":"shapes_text/","text":"Below is a list of all of the shapes, and text available for drawing within spark. All of the examples below assume you have the boilerplate from the notebook setup in your code Rectangles To create a rectangle there are 3 options: Function Description rect(x, y, w, l) Draw a rectangle filled with color, and with a stroke fill_rect(x, y, w, l) Draw an rectangle filled with a color stroke_rect(x, y, w, l) Draw the rectangle of an ellipse (it's stroke) Comparison of 3 functions, note the red color was added for visibility, by default fill is black rect() 1 rect ( x , y , w , l ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle w: (int or float) The width of the rectange l: (int or float) The length of the rectange Example(s): Creating a filled and stroked rectangle at (100, 100) with a width of 75, and length of 50 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): rect ( 100 , 100 , 75 , 50 ) Results in: fill_rect() 1 fill_rect ( x , y , w , l ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle w: (int or float) The width of the rectange l: (int or float) The length of the rectange Example(s): Creating a filled rectangle at (100, 100) with a width of 75, and length of 50 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_rect ( 100 , 100 , 75 , 50 ) Results in: stroke_rect() 1 stroke_rect ( x , y , w , l ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle w: (int or float) The width of the rectange l: (int or float) The length of the rectange Example(s): Creating a filled rectangle at (100, 100) with a width of 75, and length of 50 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): stroke_rect ( 100 , 100 , 75 , 50 ) Results in: Squares To create a square there are 3 options: Function Description square(x, y, s) Draw a square filled with color, and with a stroke fill_square(x, y, s) Draw an square filled with a color stroke_square(x, y, s) Draw the outline of a square (its stroke) Comparison of 3 functions, note the red color was added for visibility, by default fill is black square() 1 square ( x , y , s ) Parameters x: (int or float) The value of the x position of the square y: (int or float) The value of the y position of the square s: (int or float) The width and height of the square Example(s): Creating a filled and stroked square at (100, 100) with a width and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): square ( 100 , 100 , 75 ) Results in: fill_square() 1 fill_square ( x , y , s ) Parameters x: (int or float) The value of the x position of the square y: (int or float) The value of the y position of the square s: (int or float) The width and height of the square Example(s): Creating a filled square at (100, 100) with a width and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_square ( 100 , 100 , 75 ) Results in: stroke_square() 1 stroke_square ( x , y , s ) Parameters x: (int or float) The value of the x position of the square y: (int or float) The value of the y position of the square s: (int or float) The width and height of the square Example(s): Creating a stroked square at (100, 100) with a width and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): stroke_square ( 100 , 100 , 75 ) Results in: Circles To create a circle there are 3 options: Function Description circle(x, y, d) Draw a circle filled with color, and with a stroke fill_circle(x, y, d) Draw an circle filled with a color stroke_circle(x, y, d) Draw the circle of an ellipse (it's stroke) Comparison of 3 functions, note the red color was added for visibility, by default fill is black circle() 1 circle ( x , y , d ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle d: (int or float) The diameter of the circle Example(s): Creating a filled and stroked circle at (100, 100) with a diameter of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): circle ( 100 , 100 , 75 ) Results in: fill_circle() 1 fill_circle ( x , y , d ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle d: (int or float) The diameter of the circle Example(s): Creating a filled circle at (100, 100) with a diameter of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_circle ( 100 , 100 , 75 ) Results in: stroke_circle() 1 stroke_circle ( x , y , d ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle d: (int or float) The diameter of the circle Example(s): Creating a sroked circle at (100, 100) with a diameter of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): stroke_circle ( 100 , 100 , 75 ) Results in: Ellipses To create an ellipse there are 3 options: Function Description ellipse(x, y, l, w) Draw an ellipse filled with color, and with a stroke fill_ellipse(x, y, l, w) Draw an ellipse filled with a color stroke_ellipse(x, y, l, w) Draw the outline of an ellipse (it's stroke) Comparison of 3 functions, note the red color was added for visibility, by default fill is black ellipse() 1 ellipse ( x , y , l , w ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle l: (int or float) The length of the ellipse w: (int or float) The width of the ellipse Example(s): Creating a filled and stroked ellipse at (100, 100) with a length of 100 and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): ellipse ( 100 , 100 , 100 , 75 ) Results in: fill_ellipse() 1 fill_ellipse ( x , y , l , w ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle l: (int or float) The length of the ellipse w: (int or float) The width of the ellipse Example(s): Creating a filled ellipse at (100, 100) with a length of 100 and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_ellipse ( 100 , 100 , 100 , 75 ) Results in: stroke_ellipse() 1 stroke_ellipse ( x , y , l , w ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle l: (int or float) The length of the ellipse w: (int or float) The width of the ellipse Example(s): Creating a filled ellipse at (100, 100) with a length of 100 and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): stroke_ellipse ( 100 , 100 , 100 , 75 ) Results in: Triangles To create a triangle there are 3 options: Function Description traingle(x1, y1, x2, y2, x3, y3) Draw a triangle filled with color, and with a stroke fill_triangle(x1, y1, x2, y2, x3, y3) Draw a triangle filled with a color stroke_triangle(x1, y1, x2, y2, x3, y3) Draw the outline of a trianlge (it's stroke) Comparison of 3 functions, note the red color was added for visibility, by default fill is black triangle() 1 triangle ( x1 , y1 , x2 , y2 , x3 , y3 ) Parameters x1: (int or float) The value of the x position first of the three points y1: (int or float) The value of the y position first of the three points x2: (int or float) The value of the x position second of the three points y2: (int or float) The value of the y position second of the three points x3: (int or float) The value of the x position last of the three points y3: (int or float) The value of the y position last of the three points Example(s): Creating a triangle with points at (110, 75), (75, 150), (150, 150) 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): triangle ( 110 , 75 , 75 , 150 , 150 , 150 ) Results in: fill_triangle() 1 fill_triangle ( x1 , y1 , x2 , y2 , x3 , y3 ) Parameters x1: (int or float) The value of the x position first of the three points y1: (int or float) The value of the y position first of the three points x2: (int or float) The value of the x position second of the three points y2: (int or float) The value of the y position second of the three points x3: (int or float) The value of the x position last of the three points y3: (int or float) The value of the y position last of the three points Example(s): Creating a filled triangle with points at (110, 75), (75, 150), (150, 150) 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_triangle ( 110 , 75 , 75 , 150 , 150 , 150 ) Results in: stroke_triangle() 1 stroke_triangle ( x1 , y1 , x2 , y2 , x3 , y3 ) Parameters x1: (int or float) The value of the x position first of the three points y1: (int or float) The value of the y position first of the three points x2: (int or float) The value of the x position second of the three points y2: (int or float) The value of the y position second of the three points x3: (int or float) The value of the x position last of the three points y3: (int or float) The value of the y position last of the three points Example(s): Creating a stroked triangle with points at (110, 75), (75, 150), (150, 150) 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): stroke_triangle ( 110 , 75 , 75 , 150 , 150 , 150 ) Results in: Text To create text in your drawing use: 1 text ( message , x , y ) Parameters message: (str) The text you want to draw x: (int or float) The value of the x position of the text y: (int or float) The value of the y position of the text Example(s): Creating some text at (100, 100) 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): text ( \"Hello World!\" , 100 , 100 ) Results in: Change text size To change the size of your text use: 1 text_size ( s ) Parameters s: (int or float) The size you want to make your text Example(s): Creating some text at (100, 100), that is 16pt font 1 2 3 4 5 6 7 8 %% ignite def setup (): size ( 200 , 200 ) def draw (): text_size ( 16 ) text ( \"Hello World!\" , 100 , 100 ) Results in:","title":"Shapes & Text"},{"location":"shapes_text/#rectangles","text":"To create a rectangle there are 3 options: Function Description rect(x, y, w, l) Draw a rectangle filled with color, and with a stroke fill_rect(x, y, w, l) Draw an rectangle filled with a color stroke_rect(x, y, w, l) Draw the rectangle of an ellipse (it's stroke) Comparison of 3 functions, note the red color was added for visibility, by default fill is black","title":"Rectangles"},{"location":"shapes_text/#rect","text":"1 rect ( x , y , w , l ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle w: (int or float) The width of the rectange l: (int or float) The length of the rectange Example(s): Creating a filled and stroked rectangle at (100, 100) with a width of 75, and length of 50 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): rect ( 100 , 100 , 75 , 50 ) Results in:","title":"rect()"},{"location":"shapes_text/#fill_rect","text":"1 fill_rect ( x , y , w , l ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle w: (int or float) The width of the rectange l: (int or float) The length of the rectange Example(s): Creating a filled rectangle at (100, 100) with a width of 75, and length of 50 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_rect ( 100 , 100 , 75 , 50 ) Results in:","title":"fill_rect()"},{"location":"shapes_text/#stroke_rect","text":"1 stroke_rect ( x , y , w , l ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle w: (int or float) The width of the rectange l: (int or float) The length of the rectange Example(s): Creating a filled rectangle at (100, 100) with a width of 75, and length of 50 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): stroke_rect ( 100 , 100 , 75 , 50 ) Results in:","title":"stroke_rect()"},{"location":"shapes_text/#squares","text":"To create a square there are 3 options: Function Description square(x, y, s) Draw a square filled with color, and with a stroke fill_square(x, y, s) Draw an square filled with a color stroke_square(x, y, s) Draw the outline of a square (its stroke) Comparison of 3 functions, note the red color was added for visibility, by default fill is black","title":"Squares"},{"location":"shapes_text/#square","text":"1 square ( x , y , s ) Parameters x: (int or float) The value of the x position of the square y: (int or float) The value of the y position of the square s: (int or float) The width and height of the square Example(s): Creating a filled and stroked square at (100, 100) with a width and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): square ( 100 , 100 , 75 ) Results in:","title":"square()"},{"location":"shapes_text/#fill_square","text":"1 fill_square ( x , y , s ) Parameters x: (int or float) The value of the x position of the square y: (int or float) The value of the y position of the square s: (int or float) The width and height of the square Example(s): Creating a filled square at (100, 100) with a width and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_square ( 100 , 100 , 75 ) Results in:","title":"fill_square()"},{"location":"shapes_text/#stroke_square","text":"1 stroke_square ( x , y , s ) Parameters x: (int or float) The value of the x position of the square y: (int or float) The value of the y position of the square s: (int or float) The width and height of the square Example(s): Creating a stroked square at (100, 100) with a width and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): stroke_square ( 100 , 100 , 75 ) Results in:","title":"stroke_square()"},{"location":"shapes_text/#circles","text":"To create a circle there are 3 options: Function Description circle(x, y, d) Draw a circle filled with color, and with a stroke fill_circle(x, y, d) Draw an circle filled with a color stroke_circle(x, y, d) Draw the circle of an ellipse (it's stroke) Comparison of 3 functions, note the red color was added for visibility, by default fill is black","title":"Circles"},{"location":"shapes_text/#circle","text":"1 circle ( x , y , d ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle d: (int or float) The diameter of the circle Example(s): Creating a filled and stroked circle at (100, 100) with a diameter of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): circle ( 100 , 100 , 75 ) Results in:","title":"circle()"},{"location":"shapes_text/#fill_circle","text":"1 fill_circle ( x , y , d ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle d: (int or float) The diameter of the circle Example(s): Creating a filled circle at (100, 100) with a diameter of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_circle ( 100 , 100 , 75 ) Results in:","title":"fill_circle()"},{"location":"shapes_text/#stroke_circle","text":"1 stroke_circle ( x , y , d ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle d: (int or float) The diameter of the circle Example(s): Creating a sroked circle at (100, 100) with a diameter of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): stroke_circle ( 100 , 100 , 75 ) Results in:","title":"stroke_circle()"},{"location":"shapes_text/#ellipses","text":"To create an ellipse there are 3 options: Function Description ellipse(x, y, l, w) Draw an ellipse filled with color, and with a stroke fill_ellipse(x, y, l, w) Draw an ellipse filled with a color stroke_ellipse(x, y, l, w) Draw the outline of an ellipse (it's stroke) Comparison of 3 functions, note the red color was added for visibility, by default fill is black","title":"Ellipses"},{"location":"shapes_text/#ellipse","text":"1 ellipse ( x , y , l , w ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle l: (int or float) The length of the ellipse w: (int or float) The width of the ellipse Example(s): Creating a filled and stroked ellipse at (100, 100) with a length of 100 and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): ellipse ( 100 , 100 , 100 , 75 ) Results in:","title":"ellipse()"},{"location":"shapes_text/#fill_ellipse","text":"1 fill_ellipse ( x , y , l , w ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle l: (int or float) The length of the ellipse w: (int or float) The width of the ellipse Example(s): Creating a filled ellipse at (100, 100) with a length of 100 and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_ellipse ( 100 , 100 , 100 , 75 ) Results in:","title":"fill_ellipse()"},{"location":"shapes_text/#stroke_ellipse","text":"1 stroke_ellipse ( x , y , l , w ) Parameters x: (int or float) The value of the x position of the rectangle y: (int or float) The value of the y position of the rectangle l: (int or float) The length of the ellipse w: (int or float) The width of the ellipse Example(s): Creating a filled ellipse at (100, 100) with a length of 100 and height of 75 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): stroke_ellipse ( 100 , 100 , 100 , 75 ) Results in:","title":"stroke_ellipse()"},{"location":"shapes_text/#triangles","text":"To create a triangle there are 3 options: Function Description traingle(x1, y1, x2, y2, x3, y3) Draw a triangle filled with color, and with a stroke fill_triangle(x1, y1, x2, y2, x3, y3) Draw a triangle filled with a color stroke_triangle(x1, y1, x2, y2, x3, y3) Draw the outline of a trianlge (it's stroke) Comparison of 3 functions, note the red color was added for visibility, by default fill is black","title":"Triangles"},{"location":"shapes_text/#triangle","text":"1 triangle ( x1 , y1 , x2 , y2 , x3 , y3 ) Parameters x1: (int or float) The value of the x position first of the three points y1: (int or float) The value of the y position first of the three points x2: (int or float) The value of the x position second of the three points y2: (int or float) The value of the y position second of the three points x3: (int or float) The value of the x position last of the three points y3: (int or float) The value of the y position last of the three points Example(s): Creating a triangle with points at (110, 75), (75, 150), (150, 150) 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): triangle ( 110 , 75 , 75 , 150 , 150 , 150 ) Results in:","title":"triangle()"},{"location":"shapes_text/#fill_triangle","text":"1 fill_triangle ( x1 , y1 , x2 , y2 , x3 , y3 ) Parameters x1: (int or float) The value of the x position first of the three points y1: (int or float) The value of the y position first of the three points x2: (int or float) The value of the x position second of the three points y2: (int or float) The value of the y position second of the three points x3: (int or float) The value of the x position last of the three points y3: (int or float) The value of the y position last of the three points Example(s): Creating a filled triangle with points at (110, 75), (75, 150), (150, 150) 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): fill_triangle ( 110 , 75 , 75 , 150 , 150 , 150 ) Results in:","title":"fill_triangle()"},{"location":"shapes_text/#stroke_triangle","text":"1 stroke_triangle ( x1 , y1 , x2 , y2 , x3 , y3 ) Parameters x1: (int or float) The value of the x position first of the three points y1: (int or float) The value of the y position first of the three points x2: (int or float) The value of the x position second of the three points y2: (int or float) The value of the y position second of the three points x3: (int or float) The value of the x position last of the three points y3: (int or float) The value of the y position last of the three points Example(s): Creating a stroked triangle with points at (110, 75), (75, 150), (150, 150) 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): stroke_triangle ( 110 , 75 , 75 , 150 , 150 , 150 ) Results in:","title":"stroke_triangle()"},{"location":"shapes_text/#text","text":"To create text in your drawing use: 1 text ( message , x , y ) Parameters message: (str) The text you want to draw x: (int or float) The value of the x position of the text y: (int or float) The value of the y position of the text Example(s): Creating some text at (100, 100) 1 2 3 4 5 6 7 %% ignite def setup (): size ( 200 , 200 ) def draw (): text ( \"Hello World!\" , 100 , 100 ) Results in:","title":"Text"},{"location":"shapes_text/#change-text-size","text":"To change the size of your text use: 1 text_size ( s ) Parameters s: (int or float) The size you want to make your text Example(s): Creating some text at (100, 100), that is 16pt font 1 2 3 4 5 6 7 8 %% ignite def setup (): size ( 200 , 200 ) def draw (): text_size ( 16 ) text ( \"Hello World!\" , 100 , 100 ) Results in:","title":"Change text size"},{"location":"utilities/","text":"Below is a list of all of some other helpful functions available within spark. All of the examples below assume you have the boilerplate from the notebook setup in your code Create a random float between 0 and 1 To generate a random float between 0 and 1 use: 1 random () Example(s): Printing a random value between 0-1 1 2 3 4 5 %% ignite def setup (): size ( 200 , 200 ) print ( random ()) Results in: Create a random int To generate a random integer between 0 and n (inclusive) use: 1 randint ( n ) Parameters n: (int) The highest value in the range Example(s): Printing a random value between 0-10 1 2 3 4 5 %% ignite def setup (): size ( 200 , 200 ) print ( randint ( 10 )) Results in: Distance between two points (x1, y1) and (x2, y2) To find the distance between two points (x1, y1) and (x2, y2), use the following command: 1 dist ( x1 , y1 , x2 , y2 ) Parameters x1: (float) The x-coordinate of the first point y1: (float) The y-coordinate of the first point x2: (float) The x-coordinate of the second point y2: (float) The y-coordinate of the second point Example(s): Print the distance between (125, 125) and (375, 375) 1 2 3 4 %% ignite def setup (): print ( dist ( 125 , 125 , 375 , 375 )) Results in: Translate Change the origin of the canvas. Usage: 1 translate ( x , y ) Parameters x: (float) The horizontal distance to translate the canvas. y: (float) The vertical distance to translate the canvas. Example(s): Translate the canvas 50 units right and 75 units down 1 2 3 4 5 6 7 8 9 %% ignite def setup (): size ( 400 , 400 ) fill_style ( \"red\" ) # move canvas 50 units right, and 75 units down translate ( 50 , 75 ) circle ( 0 , 0 , 100 ) Results in: Rotation Transformations are always done to the canvas , not the individual shapes themselves. Rotation is done around the origin, point (0, 0) and affects all shapes drawn afterwards. You can use our built-in pi variable to express radians, or convert from degrees to radians by multiplying your number of degrees by pi / 180 . Note that canvas transformations are not removed automatically. In other words, if you want to rotate just one shape in your draw() function, you should rotate the canvas by r radians, draw your shape, and then rotate by -r radians to undo the effect. Also note that you can rotate on a point other than the origin by first calling translate to change the origin to the new point. To rotate the canvas clockwise around the origin, use: 1 rotate ( r ) Parameters r: (float) The angle, in radians to rotate the canvas Example(s): Rotating a rectangle by 30 degrees clockwise 1 2 3 4 5 6 7 %% ignite def setup (): size ( 300 , 300 ) rotate ( pi / 6 ) # Rotate pi/6 radians (30 degrees) clockwise rect ( 100 , 0 , 80 , 50 ) Results in: Scale Scales the canvas. Note that scaling applies to the canvas, not to individual shapes. You can scale on a point other than the origin by first calling translate to change the origin to the new point. There are two ways to use scale: Method Description Syntax 1 float Scale canvas width and height by some amount, i.e. 1.5 scale(1.5) 2 floats Scale canvas width by first number and height by second number, i.e. 2.5, 3.5 scale(2.5, 3.5) Scale with one float 1 scale ( n ) Parameters n: (float) The amount to scale the height and width of the canvas. Example(s): Double height and width of canvas using scale 1 2 3 4 5 6 7 8 9 %% ignite def setup (): size ( 400 , 400 ) fill_style ( \"red\" ) # apply scale of 2, this will scale canvas units by factor of 2 horizontally and vertically scale ( 2 ) circle ( 100 , 100 , 100 ) Results in: Scale with two floats 1 scale ( x , y ) Parameters x: (float) The amount to scale the width of the canvas. y: (float) The amount to scale the height of the canvas. Example(s): Scale canvas width by 0.75 and canvas height by 1.25 1 2 3 4 5 6 7 8 9 %% ignite def setup (): size ( 400 , 400 ) fill_style ( \"red\" ) # apply scale of (0.75, 1.25), this will scale canvas units by factor of 0.75 horizontally and 1.25 vertically scale ( 0.75 , 1.25 ) circle ( 100 , 100 , 100 ) Results in: Accessing the canvas frame rate The frame rate of the canvas can be accessed through the built-in variable 1 FRAME_RATE The value of FRAME_RATE is set to 30 by default, and should not be changed by the user. Changing this manually will not change the actual frame rate, and will likely result in errors. Example: 1 2 3 4 %% ignite def setup (): print ( FRAME_RATE ) Results in: The use-cases of this of this variable are fairly limited, but can be used for example to set a speed variable in terms of the frame rate. For example: 1 2 3 4 5 6 7 x = 10 speed = 300 / FRAME_RATE def draw (): global x , speed circle ( x , 100 , 50 ) x += speed will result in the circle moving across the screen at 300 pixels per second.","title":"Utilities"},{"location":"utilities/#create-a-random-float-between-0-and-1","text":"To generate a random float between 0 and 1 use: 1 random () Example(s): Printing a random value between 0-1 1 2 3 4 5 %% ignite def setup (): size ( 200 , 200 ) print ( random ()) Results in:","title":"Create a random float between 0 and 1"},{"location":"utilities/#create-a-random-int","text":"To generate a random integer between 0 and n (inclusive) use: 1 randint ( n ) Parameters n: (int) The highest value in the range Example(s): Printing a random value between 0-10 1 2 3 4 5 %% ignite def setup (): size ( 200 , 200 ) print ( randint ( 10 )) Results in:","title":"Create a random int"},{"location":"utilities/#distance-between-two-points-x1-y1-and-x2-y2","text":"To find the distance between two points (x1, y1) and (x2, y2), use the following command: 1 dist ( x1 , y1 , x2 , y2 ) Parameters x1: (float) The x-coordinate of the first point y1: (float) The y-coordinate of the first point x2: (float) The x-coordinate of the second point y2: (float) The y-coordinate of the second point Example(s): Print the distance between (125, 125) and (375, 375) 1 2 3 4 %% ignite def setup (): print ( dist ( 125 , 125 , 375 , 375 )) Results in:","title":"Distance between two points (x1, y1) and (x2, y2)"},{"location":"utilities/#translate","text":"Change the origin of the canvas. Usage: 1 translate ( x , y ) Parameters x: (float) The horizontal distance to translate the canvas. y: (float) The vertical distance to translate the canvas. Example(s): Translate the canvas 50 units right and 75 units down 1 2 3 4 5 6 7 8 9 %% ignite def setup (): size ( 400 , 400 ) fill_style ( \"red\" ) # move canvas 50 units right, and 75 units down translate ( 50 , 75 ) circle ( 0 , 0 , 100 ) Results in:","title":"Translate"},{"location":"utilities/#rotation","text":"Transformations are always done to the canvas , not the individual shapes themselves. Rotation is done around the origin, point (0, 0) and affects all shapes drawn afterwards. You can use our built-in pi variable to express radians, or convert from degrees to radians by multiplying your number of degrees by pi / 180 . Note that canvas transformations are not removed automatically. In other words, if you want to rotate just one shape in your draw() function, you should rotate the canvas by r radians, draw your shape, and then rotate by -r radians to undo the effect. Also note that you can rotate on a point other than the origin by first calling translate to change the origin to the new point. To rotate the canvas clockwise around the origin, use: 1 rotate ( r ) Parameters r: (float) The angle, in radians to rotate the canvas Example(s): Rotating a rectangle by 30 degrees clockwise 1 2 3 4 5 6 7 %% ignite def setup (): size ( 300 , 300 ) rotate ( pi / 6 ) # Rotate pi/6 radians (30 degrees) clockwise rect ( 100 , 0 , 80 , 50 ) Results in:","title":"Rotation"},{"location":"utilities/#scale","text":"Scales the canvas. Note that scaling applies to the canvas, not to individual shapes. You can scale on a point other than the origin by first calling translate to change the origin to the new point. There are two ways to use scale: Method Description Syntax 1 float Scale canvas width and height by some amount, i.e. 1.5 scale(1.5) 2 floats Scale canvas width by first number and height by second number, i.e. 2.5, 3.5 scale(2.5, 3.5)","title":"Scale"},{"location":"utilities/#scale-with-one-float","text":"1 scale ( n ) Parameters n: (float) The amount to scale the height and width of the canvas. Example(s): Double height and width of canvas using scale 1 2 3 4 5 6 7 8 9 %% ignite def setup (): size ( 400 , 400 ) fill_style ( \"red\" ) # apply scale of 2, this will scale canvas units by factor of 2 horizontally and vertically scale ( 2 ) circle ( 100 , 100 , 100 ) Results in:","title":"Scale with one float"},{"location":"utilities/#scale-with-two-floats","text":"1 scale ( x , y ) Parameters x: (float) The amount to scale the width of the canvas. y: (float) The amount to scale the height of the canvas. Example(s): Scale canvas width by 0.75 and canvas height by 1.25 1 2 3 4 5 6 7 8 9 %% ignite def setup (): size ( 400 , 400 ) fill_style ( \"red\" ) # apply scale of (0.75, 1.25), this will scale canvas units by factor of 0.75 horizontally and 1.25 vertically scale ( 0.75 , 1.25 ) circle ( 100 , 100 , 100 ) Results in:","title":"Scale with two floats"},{"location":"utilities/#accessing-the-canvas-frame-rate","text":"The frame rate of the canvas can be accessed through the built-in variable 1 FRAME_RATE The value of FRAME_RATE is set to 30 by default, and should not be changed by the user. Changing this manually will not change the actual frame rate, and will likely result in errors. Example: 1 2 3 4 %% ignite def setup (): print ( FRAME_RATE ) Results in: The use-cases of this of this variable are fairly limited, but can be used for example to set a speed variable in terms of the frame rate. For example: 1 2 3 4 5 6 7 x = 10 speed = 300 / FRAME_RATE def draw (): global x , speed circle ( x , 100 , 50 ) x += speed will result in the circle moving across the screen at 300 pixels per second.","title":"Accessing the canvas frame rate"}]}